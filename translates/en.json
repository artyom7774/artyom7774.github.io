{
    "Game Engine 3": {
        "name": "Game Engine 3",
        "text": [
            "<p class='content__main__name'>Game Engine 3</p>",
            "Welcome to Game Engine 3 - a tool designed to simplify the app and game development process, suitable for beginners and professional developers!",
            "",
            "How to install the program:",
            "• Download last version: <a href='https://github.com/artyom7774/Game-Engine-3/releases/download/GE%version%/Game-Engine-3.windows.exe'>click to download</a> (Windows)",
            "• Run file \"Game Engine 3.exe\" (after launch the necessary libraries will be installed)",
            "",
            "System requirements:",
            "• Windows 10 - 12 x64",
            "• 4GB RAM", 
            "• Intel HD Graphics 4000 / AMD Radeon R5",
            "• Nvidia GeForce 400 / AMD Radeon HD 7000"
        ]
    },
    "Download": {
        "name": "Download",
        "text": [
            "Last version: <a href='https://github.com/artyom7774/Game-Engine-3/releases/tag/GE%version%'>https://github.com/artyom7774/Game-Engine-3/releases/tag/GE%version%</a>"
        ]
    },
    "Control": {
        "name": "Control",
        "text": [
            "<p class='content__main__name'>Scene</p>",
            "Movement - mouse",
            "Move object - arrows",
            "",
            "Binds:",
            "• Right mouse button - menu",
            "",
            "• Q - remove object selection",
            "",
            "• Ctrl+C - copy object",
            "• Ctrl+V - paste object",
            "",
            "• Delete - delete object",
            "",
            "<p class='content__main__name'>Code</p>",
            "Movement - mouse",
            "Move node - middle mouse button",
            "",
            "Binds:",
            "• Right mouse button - menu"
        ]
    },
    "Programming": {
        "name": "Programming",
        "text": [
            "<p class='content__main__name'>Programming</p>",
            "This shell allows you to write python code for application development",
            "To do this, you need to use a \"Python\" node in your code",
            "",
            "On running node, code writing in code was running and activate function run",
            "There are also additional functions that repeat the functionality of nodes",
            "",
            "Functions:",
            "• decodeHolder(text) -> return decoded value",
            "• exit() -> close project",
            "• getVar(name, global) -> return variable by name and globality",
            "• setVar(name, global, value) -> set value to variable by name and globality",
            "• objectsGroup(group) -> return all objects in group",
            "• random(a, b) -> return random number in [a, b]",
            "• writeText(text) -> write text on console",
            "• displayText(text, x, y) -> display text on scene in x, y",
            "• collision(ids, group, append) -> return [True, object ID] if collision else [False, -1]. Append - count contact as a collision",
            "• createObject(name, x, y) -> create object by name in dir objects and place this on x, y",
            "• getObjectIDByName(name) -> return ID of object by name. Name have object which were created on stage before running",
            "• getObjectPos(id) -> return object x, y by ID",
            "• setObjectPos(id, x, y) -> set position for object by ID",
            "• getObjectVar(id, name) -> return variable by object ID and name",
            "• setObjectVar(id, name, value) -> set value to variable by id and name",
            "• jump(id) -> jump for object by ID",
            "• moveObject(id, angle, power) -> create moving vector by angle and power for object ID",
            "• removeObject(id) -> remove object by ID"
        ]
    },
    "Nodes": {
        "name": "Nodes",
        "text": [
            
        ]
    },
    "Nodes/Events": {
        "name": "Nodes Events",
        "text": [
            "<p class='content__main__name'>On start game</p>",
            "Input: -",
            "Output: path",
            "",
            "Return path on start game",
            "<img class='content__main__image' width='375' src='scr/guide/1.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Every N frames</p>",
            "Input: N",
            "Output: path",
            "",
            "Return path every N frames",
            "<img class='content__main__image' width='375' src='scr/guide/2.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Every N ticks</p>",
            "Input: N",
            "Output: path",
            "",
            "Return path every N ticks",
            "<img class='content__main__image' width='375' src='scr/guide/3.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Mouse right click</p>",
            "Input: -",
            "Output: path",
            "",
            "Return path on mouse right click",
            "<img class='content__main__image' width='375' src='scr/guide/4.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Mouse left click</p>",
            "Input: -",
            "Output: path",
            "",
            "Return path on mouse left click",
            "<img class='content__main__image' width='375' src='scr/guide/5.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Keyboard click</p>",
            "Input: symbol",
            "Output: path",
            "",
            "Return path on key click",
            "<img class='content__main__image' width='375' src='scr/guide/6.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Keyboard press</p>",
            "Input: symbol",
            "Output: path",
            "",
            "Return path every frame while key pressed",
            "<img class='content__main__image' width='375' src='scr/guide/7.png'>",
            "----------------------------------------------------------------------------------------------------"
        ]
    },
    "Nodes/Loops": {
        "name": "Nodes Loops",
        "text": [
            "<p class='content__main__name'>For N times</p>",
            "Input: path, N, X",
            "Output: iterator, index, path",
            "",
            "Return iterator and index N times with delay X frames",
            "After tham return path",
            "<img class='content__main__image' width='625' src='scr/guide/8.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>For objects in group</p>",
            "Input: path, group name",
            "Output: iterator, object ID, path",
            "",
            "Return iterator and object ID for every object in group",
            "After them return path",
            "<img class='content__main__image' width='625' src='scr/guide/9.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>For list elements</p>",
            "Input: path, list",
            "Output: path, iterator, index, element",
            "",
            "Return iterator, index, element for every element in list",
            "After tham return path",
            "<img class='content__main__image' width='875' src='scr/guide/10.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>For dict elements</p>",
            "Input: path, dict",
            "Output: path, iterator, key, element",
            "",
            "Return iterator, key, element for every element in dict",
            "After tham return path",
            "<img class='content__main__image' width='875' src='scr/guide/11.png'>",
            "----------------------------------------------------------------------------------------------------"
        ]
    },
    "Nodes/Text": {
        "name": "Nodes Text",
        "text": [
            "<p class='content__main__name'>Connect text</p>",
            "Input: path, first text, second text",
            "Output: path, text",
            "",
            "Return connected first and second text",
            "<img class='content__main__image' width='625' src='scr/guide/12.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Slice text</p>",
            "Input: path, text, start index, end index",
            "Output: path, sliced text",
            "",
            "Return text started on start index and ended on ended index",
            "<img class='content__main__image' width='675' src='scr/guide/13.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Write text</p>",
            "Input: path, text",
            "Output: path",
            "",
            "Write text on console",
            "<img class='content__main__image' width='375' src='scr/guide/1.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Display text</p>",
            "Input: path, text, x, y",
            "Output: path",
            "",
            "Display text on this frame on X, Y",
            "<img class='content__main__image' width='475' src='scr/guide/14.png'>",
            "----------------------------------------------------------------------------------------------------"
        ]
    },
    "Nodes/Numbers": {
        "name": "Nodes Numbers",
        "text": [
            "<p class='content__main__name'>A + B</p>",
            "Input: path, a, b",
            "Output: path, answer",
            "",
            "Return a + b",
            "<img class='content__main__image' width='625' src='scr/guide/15.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>A - B</p>",
            "Input: path, a, b",
            "Output: path, answer",
            "",
            "Return a - b",
            "<img class='content__main__image' width='625' src='scr/guide/16.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>A * B</p>",
            "Input: path, a, b",
            "Output: path, answer",
            "",
            "Return a * b",
            "<img class='content__main__image' width='625' src='scr/guide/17.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>A / B</p>",
            "Input: path, a, b",
            "Output: path, answer",
            "",
            "Return a / b",
            "<img class='content__main__image' width='625' src='scr/guide/18.png'>",
            "----------------------------------------------------------------------------------------------------"
        ]
    },
    "Nodes/Logic": {
        "name": "Nodes Logic",
        "text": [
            "<p class='content__main__name'>If</p>",
            "Input: path, a, condition, b",
            "Output: true path, false path",
            "",
            "Return if condition true return true path else false path",
            "<img class='content__main__image' width='675' src='scr/guide/19.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>If collision</p>",
            "Input: path, object ID, collision group, consider only intersection as a collision",
            "Output: true path, false path, object id",
            "",
            "Return if condition true return true path and object id else false path",
            "THE ID OF THE OBJECT WITH WHICH THE COLLISION IS CHECKED MUST BE DYNAMIC!!!",
            "<img class='content__main__image' width='1075' src='scr/guide/20.png'>",
            "----------------------------------------------------------------------------------------------------"
        ]
    },
    "Nodes/Objects": {
        "name": "Nodes Objects",
        "text": [
            "<p class='content__main__name'>Get object ID by name</p>",
            "Input: path, object name",
            "Output: path, object ID",
            "",
            "Return object ID by object name, if name is not defined return -1",
            "<img class='content__main__image' width='575' src='scr/guide/21.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Set object pos</p>",
            "Input: path, object ID, X, Y",
            "Output: path",
            "",
            "Set object pos to X, Y",
            "<img class='content__main__image' width='675' src='scr/guide/22.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Move object</p>",
            "Input: path, object ID, angle, power",
            "Output: path",
            "",
            "Move object by ID on power by angle",
            "The power parameter is the acceleration of the object",
            "<img class='content__main__image' width='675' src='scr/guide/23.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Get object pos</p>",
            "Input: path, object ID",
            "Output: path, X, Y",
            "",
            "Return object X, Y",
            "<img class='content__main__image' width='825' src='scr/guide/24.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Set object var</p>",
            "Input: path, object ID, variable name, variable value",
            "Output: path",
            "",
            "Set variable value to variable name for object ID",
            "<img class='content__main__image' width='700' src='scr/guide/25.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Get object var</p>",
            "Input: path, object ID, variable name",
            "Output: path, variable value",
            "",
            "Get variable value by variable name in object",
            "<img class='content__main__image' width='825' src='scr/guide/26.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Create object</p>",
            "Input: object ID, collision group, consider only intersection as a collision",
            "Output: true path, false path, object id",
            "",
            "Return if condition true return true path and object id else false path",
            "<img class='content__main__image' width='700' src='scr/guide/27.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Remove object</p>",
            "Input: path, object ID",
            "Output: path",
            "",
            "Delete object by ID",
            "<img class='content__main__image' width='600' src='scr/guide/28.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Jump</p>",
            "Input: path, object ID",
            "Output: path",
            "",
            "Imitate jump for object. WORKING ONLY WITH DINAMIC OBJECT!!!",
            "<img class='content__main__image' width='600' src='scr/guide/29.png'>",
            "----------------------------------------------------------------------------------------------------"
        ]
    },
    "Nodes/Another": {
        "name": "Nodes Another",
        "text": [
            "<p class='content__main__name'>Set var</p>",
            "Input: path, variable name, global, variable value",
            "Output: path",
            "",
            "Set variable name to variable value, variable global or local",
            "<img class='content__main__image' width='500' src='scr/guide/30.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Get var</p>",
            "Input: path, variable name, global",
            "Output: path",
            "",
            "Get variable value of variable name, variable global or local",
            "<img class='content__main__image' width='975' src='scr/guide/31.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Random</p>",
            "Input: path, A, B",
            "Output: path, number",
            "",
            "Return random number in [A, B]",
            "<img class='content__main__image' width='625' src='scr/guide/32.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Decode holder</p>",
            "Input: path, text",
            "Output: path, value",
            "",
            "Decode text holder to value",
            "",
            "Holders:",
            "• %math(expression) -> return answer on this expression",
            "• %local_var(variable) -> return value of local variable",
            "• %global_var(variable) -> return value if global variable",
            "",
            "Example:",
            "• let: local variable abc = 1",
            "",
            "• %math(%local_var(abc) + 2) -> 3",
            "<img class='content__main__image' width='575' src='scr/guide/33.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Exit</p>",
            "Input: path",
            "Output: path",
            "",
            "Close project",
            "<img class='content__main__image' width='375' src='scr/guide/34.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Len</p>",
            "Input: path, object",
            "Output: path, len",
            "",
            "Return len of object, if object type is not dict or list return 1",
            "<img class='content__main__image' width='575' src='scr/guide/44.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Python</p>",
            "Input: path, code, list, dict",
            "Output: list output",
            "",
            "Running code in function \"run\" with args = list, kwargs = dict",
            "What will be returned via return in code will be returned to the list output",
            "A more detailed guide can be found in the Programming tab",
            "",
            "<img class='content__main__image' width='575' src='scr/guide/45.png'>",
            "<img class='content__main__image' src='scr/guide/46.png'>"
        ]
    },
    "Nodes/Set": {
        "name": "Nodes Set",
        "text": [
            "<p class='content__main__name'>Add list element</p>",
            "Input: path, list, element",
            "Output: path, list",
            "",
            "Return list with element",
            "<img class='content__main__image' width='625' src='scr/guide/35.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Get by index</p>",
            "Input: path, list, index",
            "Output: path, element",
            "",
            "Return element in list by index",
            "<img class='content__main__image' width='625' src='scr/guide/36.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Delete by index</p>",
            "Input: path, list, index",
            "Output: path, list",
            "",
            "Return list without element on index in list",
            "<img class='content__main__image' width='625' src='scr/guide/37.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Get index of element</p>",
            "Input: path, list, element",
            "Output: path, index",
            "",
            "Return index of element in list",
            "<img class='content__main__image' width='625' src='scr/guide/38.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Slice list</p>",
            "Input: path, list, start, end",
            "Output: path, list",
            "",
            "Return sliced list",
            "<img class='content__main__image' width='675' src='scr/guide/39.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Add dict element</p>",
            "Input: path, dict, key, element",
            "Output: path, dict",
            "",
            "Return dict with element by key",
            "<img class='content__main__image' width='675' src='scr/guide/40.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Get by key</p>",
            "Input: path, dict, key",
            "Output: path, element",
            "",
            "Return element by key in dict",
            "<img class='content__main__image' width='625' src='scr/guide/41.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Remove by key</p>",
            "Input: path, dict, key",
            "Output: path, dict",
            "",
            "Return dict without element by key in list",
            "<img class='content__main__image' width='625' src='scr/guide/43.png'>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Get key of element</p>",
            "Input: path, dict, element",
            "Output: path, key",
            "",
            "Return key of element in dict",
            "<img class='content__main__image' width='625' src='scr/guide/42.png'>",
            "----------------------------------------------------------------------------------------------------"
        ]
    },
    "Guides": {
        "name": "Guides",
        "text": [
            "TODO: Based guide about program",
            "TODO: Guide for create first project on GE3 with hello world, project settings",
            "TODO: Guide for create first project on GE3 with using variables",
            "TODO: Guide for create game - google dino"
        ]
    },
    "Guides/Start": {
        "name": "Start",
        "text": [
            "<p class='content__main__name'>Start</p>",
            "Description of the main functions of the project",
            "Menues, Config, Objects, Scenes, Codes, Collisions, Run, Compiling",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Menues</p>",
            "<p class='content__submain__name'>Menu File: </p>",
            "• Create - create project",
            "• Copy template - create project from template",
            "• Open - open created project",
            "• Close - close project",
            "• Settings - project settings (language, theme, etc.)",
            "",
            "<p class='content__submain__name'>Menu Program: </p>",
            "• Run - running project",
            "• Compile - compiling project",
            "• Compile and run - compiling project and run compiled project",
            "• Save project - save project in directory",
            "• Save executable project - compiling project and save compiled project",
            "",
            "<p class='content__submain__name'>Menu Help: </p>",
            "• Program - help",
            "• About - about program",
            "<div class='image__container'>",
            "<img class='image__container__image' src='scr/projects/1-1.png'>",
            "<img class='image__container__image' src='scr/projects/1-2.png'>",
            "<img class='image__container__image' src='scr/projects/1-3.png'>",
            "</div>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Config</p>",
            "<p class='content__submain__name'>Main: </p>",
            "• Project name - visible name",
            "• Project icon - visible icon",
            "• Debug mode - using debug (visible object hitboxes, fps and tps)",
            "• Max fps count - max fps",
            "• Max tps count - max tps (update not dependent on fps)",
            "• Window width - screen width",
            "• Window height - screen height",
            "• Full screen - full screen mode",
            "",
            "<p class='content__submain__name'>Another: </p>",
            "• Start scene - scene from which to launch the project",
            "<div class='image__container'>",
            "<img class='image__container__image' src='scr/projects/1-4.png'>",
            "</div>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Collision</p>",
            "• The intersection of two objects indicates whether they will touch (check mark - do not touch)",
            "<div class='image__container'>",
            "<img class='image__container__image' src='scr/projects/1-8.png'>",
            "</div>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Objects</p>",
            "<p class='content__submain__name'>Settings: </p>",
            "• Object type - type of object (dynamic or static)",
            "",
            "<p class='content__submain__name'>Static Object: </p>",
            "• Object position - X, Y of object",
            "• Object hitbox - hitbox of object, starts in X + x_offset and Y + y_offset with width and height",
            "• Object sprite - path to image, x, y and width, height of image",
            "• Name of object group - object group (for collisions)",
            "• Object layer - layer of drawing",
            "• Invisible - object sprite invisible on scene",
            "• Animation - object animation",
            "",
            "<p class='content__submain__name'>Dynamic Object: </p>",
            "• Moving speed - object speed",
            "• Object gravity - gravity of object (acceleration of object falling), formula: gravity / 1000",
            "• Power jump - power of object jump",
            "• Braking power - braking of object, by how much the speed of the object decreases each frame",
            "<div class='image__container'>",
            "<img class='image__container__image' src='scr/projects/1-5.png'>",
            "</div>",
            "----------------------------------------------------------------------------------------------------",
            "<p class='content__main__name'>Scenes </p>",
            "<p class='content__submain__name'>Main: </p>",
            "• Create object - create object from Objects",
            "• Copy - copy object",
            "• Paste - paste copyed object",
            "• Delete - delete object",
            "",
            "<p class='content__submain__name'>Settings: </p>",
            "• Visible screen - view screen rama",
            "• Grid visible - visible grid",
            "• Snap to grid - snapping created objects to the grid",
            "• Grid - width and height for grid",
            "• Name focus object - object scene object on which the camera will be attached",
            "",
            "<p class='content__submain__name'>Another: </p>",
            "• for selected object you can change parameters and variables for ONLY this object",
            "• Q - clear selected",
            "",
            "<div class='image__container'>",
            "<img class='image__container__image' src='scr/projects/1-7.png'>",
            "</div>"
        ]
    },
    "Guides/First program": {
        "name": "First program",
        "text": [
            "<p class='content__main__name'>Samples of different versions of the initial program \"Hello World\"</p>",
            "<div class='image__container'>",
            "<img class='image__container__image__second' width='475' height='150' src='scr/projects/2-1.png'>",
            "</div>",
            "<div class='image__container'>",
            "<img class='image__container__image__second' width='475' height='150' src='scr/projects/2-2.png'>",
            "</div>",
            "<div class='image__container'>",
            "<img class='image__container__image__second' width='475' height='150' src='scr/projects/2-3.png'>",
            "</div>"
        ]
    },
    "Guides/Variables": {
        "name": "Variables",
        "text": [
            "TODO: Guide for create first project on GE3 with using variables"
        ]
    },
    "Guides/Project - Dino": {
        "name": "Project - Dino",
        "text": [
            "TODO: Guide for create game - google dino"
        ]
    }
}